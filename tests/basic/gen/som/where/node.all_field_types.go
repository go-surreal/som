// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package where

import (
	lib "github.com/go-surreal/som/tests/basic/gen/som/internal/lib"
	model "github.com/go-surreal/som/tests/basic/model"
	uuid "github.com/google/uuid"
	"net/url"
	"time"
)

var AllFieldTypes = newAllFieldTypes[model.AllFieldTypes](lib.NewKey[model.AllFieldTypes]())

func newAllFieldTypes[M any](key lib.Key[M]) allFieldTypes[M] {
	return allFieldTypes[M]{
		Bool:               lib.NewBool[M](lib.Field(key, "bool")),
		BoolPtr:            lib.NewBoolPtr[M](lib.Field(key, "bool_ptr")),
		BoolSlice:          lib.NewSliceMaker[M, bool, *lib.Bool[M]](lib.NewBool[M])(lib.Field(key, "bool_slice")),
		Byte:               lib.NewByte[M](lib.Field(key, "byte")),
		BytePtr:            lib.NewBytePtr[M](lib.Field(key, "byte_ptr")),
		ByteSlice:          lib.NewByteSlice[M](lib.Field(key, "byte_slice")),
		ByteSlicePtr:       lib.NewByteSlice[M](lib.Field(key, "byte_slice_ptr")),
		CreatedAt:          lib.NewTime[M](lib.Field(key, "created_at")),
		Duration:           lib.NewDuration[M](lib.Field(key, "duration")),
		DurationNil:        lib.NewDurationPtr[M](lib.Field(key, "duration_nil")),
		DurationPtr:        lib.NewDurationPtr[M](lib.Field(key, "duration_ptr")),
		DurationSlice:      lib.NewSliceMaker[M, time.Duration, *lib.Duration[M]](lib.NewDuration[M])(lib.Field(key, "duration_slice")),
		EnumPtr:            lib.NewEnumPtr[M, model.Role](lib.Field(key, "enum_ptr")),
		EnumPtrSlice:       lib.NewSlice[M, model.Role](lib.Field(key, "enum_ptr_slice"), lib.NewEnumPtr[M, model.Role]),
		EnumPtrSlicePtr:    lib.NewSlice[M, model.Role](lib.Field(key, "enum_ptr_slice_ptr"), lib.NewEnumPtr[M, model.Role]),
		Float32:            lib.NewNumeric[M, float32](lib.Field(key, "float_32")),
		Float32PtrSlice:    lib.NewFloatSlice[M, *float32](lib.Field(key, "float_32_ptr_slice")),
		Float32PtrSlicePtr: lib.NewFloatSlicePtr[M, *float32](lib.Field(key, "float_32_ptr_slice_ptr")),
		Float32Slice:       lib.NewFloatSlice[M, float32](lib.Field(key, "float_32_slice")),
		Float32SlicePtr:    lib.NewFloatSlicePtr[M, float32](lib.Field(key, "float_32_slice_ptr")),
		Float64:            lib.NewNumeric[M, float64](lib.Field(key, "float_64")),
		GroupsSlice:        lib.NewSliceMaker[M, []model.Group, *lib.Slice[M, model.Group, group[M]]](lib.NewSliceMaker[M, model.Group, group[M]](newGroup[M]))(lib.Field(key, "groups_slice")),
		ID:                 lib.NewID[M](lib.Field(key, "id"), "all_field_types"),
		Int:                lib.NewNumeric[M, int](lib.Field(key, "int")),
		Int16:              lib.NewNumeric[M, int16](lib.Field(key, "int_16")),
		Int16Ptr:           lib.NewNumericPtr[M, *int16](lib.Field(key, "int_16_ptr")),
		Int32:              lib.NewNumeric[M, int32](lib.Field(key, "int_32")),
		Int32Ptr:           lib.NewNumericPtr[M, *int32](lib.Field(key, "int_32_ptr")),
		Int64:              lib.NewNumeric[M, int64](lib.Field(key, "int_64")),
		Int64Ptr:           lib.NewNumericPtr[M, *int64](lib.Field(key, "int_64_ptr")),
		Int8:               lib.NewNumeric[M, int8](lib.Field(key, "int_8")),
		Int8Ptr:            lib.NewNumericPtr[M, *int8](lib.Field(key, "int_8_ptr")),
		IntPtr:             lib.NewNumericPtr[M, *int](lib.Field(key, "int_ptr")),
		IntPtrSlice:        lib.NewIntSlice[M, *int](lib.Field(key, "int_ptr_slice")),
		IntPtrSlicePtr:     lib.NewIntSlicePtr[M, *int](lib.Field(key, "int_ptr_slice_ptr")),
		IntSlice:           lib.NewIntSlice[M, int](lib.Field(key, "int_slice")),
		IntSlicePtr:        lib.NewIntSlicePtr[M, int](lib.Field(key, "int_slice_ptr")),
		Key:                key,
		Other:              lib.NewStringSlice[M](lib.Field(key, "other")),
		Role:               lib.NewEnum[M, model.Role](lib.Field(key, "role")),
		Roles:              lib.NewSlice[M, model.Role](lib.Field(key, "roles"), lib.NewEnum[M, model.Role]),
		Rune:               lib.NewNumeric[M, rune](lib.Field(key, "rune")),
		RuneSlice:          lib.NewIntSlice[M, rune](lib.Field(key, "rune_slice")),
		SliceSlice:         lib.NewSliceMaker[M, []string, *lib.StringSlice[M]](lib.NewStringSlice[M])(lib.Field(key, "slice_slice")),
		SliceSliceSlice:    lib.NewSliceMaker[M, [][]string, *lib.Slice[M, []string, *lib.StringSlice[M]]](lib.NewSliceMaker[M, []string, *lib.StringSlice[M]](lib.NewStringSlice[M]))(lib.Field(key, "slice_slice_slice")),
		SliceSliceSlice2:   lib.NewSliceMaker[M, [][]model.SomeStruct, *lib.Slice[M, []model.SomeStruct, *lib.Slice[M, model.SomeStruct, someStruct[M]]]](lib.NewSliceMaker[M, []model.SomeStruct, *lib.Slice[M, model.SomeStruct, someStruct[M]]](lib.NewSliceMaker[M, model.SomeStruct, someStruct[M]](newSomeStruct[M])))(lib.Field(key, "slice_slice_slice_2")),
		String:             lib.NewString[M](lib.Field(key, "string")),
		StringPtr:          lib.NewStringPtr[M](lib.Field(key, "string_ptr")),
		StringPtrSlice:     lib.NewStringSlice[M](lib.Field(key, "string_ptr_slice")),
		StringSlicePtr:     lib.NewStringSlicePtr[M](lib.Field(key, "string_slice_ptr")),
		StructPtrSlice:     lib.NewSliceMaker[M, *model.SomeStruct, someStruct[M]](newSomeStruct[M])(lib.Field(key, "struct_ptr_slice")),
		StructPtrSlicePtr:  lib.NewSliceMaker[M, *model.SomeStruct, someStruct[M]](newSomeStruct[M])(lib.Field(key, "struct_ptr_slice_ptr")),
		StructSlice:        lib.NewSliceMaker[M, model.SomeStruct, someStruct[M]](newSomeStruct[M])(lib.Field(key, "struct_slice")),
		Time:               lib.NewTime[M](lib.Field(key, "time")),
		TimeNil:            lib.NewTimePtr[M](lib.Field(key, "time_nil")),
		TimePtr:            lib.NewTimePtr[M](lib.Field(key, "time_ptr")),
		TimeSlice:          lib.NewSliceMaker[M, time.Time, *lib.Time[M]](lib.NewTime[M])(lib.Field(key, "time_slice")),
		TimeSliceSlice:     lib.NewSliceMaker[M, []time.Time, *lib.Slice[M, time.Time, *lib.Time[M]]](lib.NewSliceMaker[M, time.Time, *lib.Time[M]](lib.NewTime[M]))(lib.Field(key, "time_slice_slice")),
		URL:                lib.NewURL[M](lib.Field(key, "url")),
		URLNil:             lib.NewURLPtr[M](lib.Field(key, "url_nil")),
		URLPtr:             lib.NewURLPtr[M](lib.Field(key, "url_ptr")),
		URLSlice:           lib.NewSliceMaker[M, url.URL, *lib.URL[M]](lib.NewURL[M])(lib.Field(key, "url_slice")),
		UUID:               lib.NewUUID[M](lib.Field(key, "uuid")),
		UUIDNil:            lib.NewUUIDPtr[M](lib.Field(key, "uuid_nil")),
		UUIDPtr:            lib.NewUUIDPtr[M](lib.Field(key, "uuid_ptr")),
		UUIDSlice:          lib.NewSliceMaker[M, uuid.UUID, *lib.UUID[M]](lib.NewUUID[M])(lib.Field(key, "uuid_slice")),
		Uint16:             lib.NewNumeric[M, uint16](lib.Field(key, "uint_16")),
		Uint16Ptr:          lib.NewNumericPtr[M, *uint16](lib.Field(key, "uint_16_ptr")),
		Uint32:             lib.NewNumeric[M, uint32](lib.Field(key, "uint_32")),
		Uint32Ptr:          lib.NewNumericPtr[M, *uint32](lib.Field(key, "uint_32_ptr")),
		Uint8:              lib.NewNumeric[M, uint8](lib.Field(key, "uint_8")),
		Uint8Ptr:           lib.NewNumericPtr[M, *uint8](lib.Field(key, "uint_8_ptr")),
		UpdatedAt:          lib.NewTime[M](lib.Field(key, "updated_at")),
	}
}

type allFieldTypes[M any] struct {
	lib.Key[M]
	ID                 *lib.ID[M]
	CreatedAt          *lib.Time[M]
	UpdatedAt          *lib.Time[M]
	String             *lib.String[M]
	StringPtr          *lib.StringPtr[M]
	Other              *lib.StringSlice[M]
	StringPtrSlice     *lib.StringSlice[M]
	StringSlicePtr     *lib.StringSlicePtr[M]
	Int                *lib.Numeric[M, int]
	IntPtr             *lib.NumericPtr[M, *int]
	IntSlice           *lib.IntSlice[M, int]
	IntPtrSlice        *lib.IntSlice[M, *int]
	IntSlicePtr        *lib.IntSlicePtr[M, int]
	IntPtrSlicePtr     *lib.IntSlicePtr[M, *int]
	Int8               *lib.Numeric[M, int8]
	Int8Ptr            *lib.NumericPtr[M, *int8]
	Int16              *lib.Numeric[M, int16]
	Int16Ptr           *lib.NumericPtr[M, *int16]
	Int32              *lib.Numeric[M, int32]
	Int32Ptr           *lib.NumericPtr[M, *int32]
	Int64              *lib.Numeric[M, int64]
	Int64Ptr           *lib.NumericPtr[M, *int64]
	Uint8              *lib.Numeric[M, uint8]
	Uint8Ptr           *lib.NumericPtr[M, *uint8]
	Uint16             *lib.Numeric[M, uint16]
	Uint16Ptr          *lib.NumericPtr[M, *uint16]
	Uint32             *lib.Numeric[M, uint32]
	Uint32Ptr          *lib.NumericPtr[M, *uint32]
	Float32            *lib.Numeric[M, float32]
	Float32Slice       *lib.FloatSlice[M, float32]
	Float32SlicePtr    *lib.FloatSlicePtr[M, float32]
	Float32PtrSlice    *lib.FloatSlice[M, *float32]
	Float32PtrSlicePtr *lib.FloatSlicePtr[M, *float32]
	Float64            *lib.Numeric[M, float64]
	Rune               *lib.Numeric[M, rune]
	RuneSlice          *lib.IntSlice[M, rune]
	Bool               *lib.Bool[M]
	BoolPtr            *lib.BoolPtr[M]
	BoolSlice          *lib.Slice[M, bool, *lib.Bool[M]]
	Time               *lib.Time[M]
	TimePtr            *lib.TimePtr[M]
	TimeNil            *lib.TimePtr[M]
	TimeSlice          *lib.Slice[M, time.Time, *lib.Time[M]]
	TimeSliceSlice     *lib.Slice[M, []time.Time, *lib.Slice[M, time.Time, *lib.Time[M]]]
	Duration           *lib.Duration[M]
	DurationPtr        *lib.DurationPtr[M]
	DurationNil        *lib.DurationPtr[M]
	DurationSlice      *lib.Slice[M, time.Duration, *lib.Duration[M]]
	UUID               *lib.UUID[M]
	UUIDPtr            *lib.UUIDPtr[M]
	UUIDNil            *lib.UUIDPtr[M]
	UUIDSlice          *lib.Slice[M, uuid.UUID, *lib.UUID[M]]
	URL                *lib.URL[M]
	URLPtr             *lib.URLPtr[M]
	URLNil             *lib.URLPtr[M]
	URLSlice           *lib.Slice[M, url.URL, *lib.URL[M]]
	Role               *lib.Enum[M, model.Role]
	EnumPtr            *lib.EnumPtr[M, model.Role]
	Roles              *lib.Slice[M, model.Role, *lib.Enum[M, model.Role]]
	EnumPtrSlice       *lib.Slice[M, model.Role, *lib.EnumPtr[M, model.Role]]
	EnumPtrSlicePtr    *lib.Slice[M, model.Role, *lib.EnumPtr[M, model.Role]]
	StructSlice        *lib.Slice[M, model.SomeStruct, someStruct[M]]
	StructPtrSlice     *lib.Slice[M, *model.SomeStruct, someStruct[M]]
	StructPtrSlicePtr  *lib.Slice[M, *model.SomeStruct, someStruct[M]]
	GroupsSlice        *lib.Slice[M, []model.Group, *lib.Slice[M, model.Group, group[M]]]
	SliceSlice         *lib.Slice[M, []string, *lib.StringSlice[M]]
	SliceSliceSlice    *lib.Slice[M, [][]string, *lib.Slice[M, []string, *lib.StringSlice[M]]]
	SliceSliceSlice2   *lib.Slice[M, [][]model.SomeStruct, *lib.Slice[M, []model.SomeStruct, *lib.Slice[M, model.SomeStruct, someStruct[M]]]]
	Byte               *lib.Byte[M]
	BytePtr            *lib.BytePtr[M]
	ByteSlice          *lib.ByteSlice[M]
	ByteSlicePtr       *lib.ByteSlice[M]
}

func (n allFieldTypes[M]) Login() login[M] {
	return newLogin[M](lib.Field(n.Key, "login"))
}

func (n allFieldTypes[M]) StructPtr() someStruct[M] {
	return newSomeStruct[M](lib.Field(n.Key, "struct_ptr"))
}

func (n allFieldTypes[M]) MainGroup() group[M] {
	return newGroup[M](lib.Field(n.Key, "main_group"))
}

func (n allFieldTypes[M]) MainGroupPtr() group[M] {
	return newGroup[M](lib.Field(n.Key, "main_group_ptr"))
}

func (n allFieldTypes[M]) Groups(filters ...lib.Filter[model.Group]) *lib.Slice[M, model.Group, group[M]] {
	key := lib.Node(n.Key, "groups", filters)
	return lib.NewSlice[M, model.Group, group[M]](key, newGroup[M])
}

func (n allFieldTypes[M]) NodePtrSlice(filters ...lib.Filter[model.Group]) *lib.Slice[M, model.Group, group[M]] {
	key := lib.Node(n.Key, "node_ptr_slice", filters)
	return lib.NewSlice[M, model.Group, group[M]](key, newGroup[M])
}

func (n allFieldTypes[M]) NodePtrSlicePtr(filters ...lib.Filter[model.Group]) *lib.Slice[M, model.Group, group[M]] {
	key := lib.Node(n.Key, "node_ptr_slice_ptr", filters)
	return lib.NewSlice[M, model.Group, group[M]](key, newGroup[M])
}

func (n allFieldTypes[M]) MemberOf(filters ...lib.Filter[model.GroupMember]) groupMemberIn[M] {
	return newGroupMemberIn[M](lib.EdgeIn(n.Key, "group_member", filters))
}

type allFieldTypesEdges[M any] struct {
	lib.Filter[M]
	lib.Key[M]
}

func (n allFieldTypesEdges[M]) MemberOf(filters ...lib.Filter[model.GroupMember]) groupMemberIn[M] {
	return newGroupMemberIn[M](lib.EdgeIn(n.Key, "group_member", filters))
}
