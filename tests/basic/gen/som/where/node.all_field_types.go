// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package where

import (
	lib "github.com/go-surreal/som/tests/basic/gen/som/internal/lib"
	model "github.com/go-surreal/som/tests/basic/model"
	uuid "github.com/google/uuid"
)

var AllFieldTypes = newAllFieldTypes[model.AllFieldTypes](lib.NewKey[model.AllFieldTypes]())

func newAllFieldTypes[T any](key lib.Key[T]) allFieldTypes[T] {
	return allFieldTypes[T]{
		Bool:      lib.NewBool[T](lib.Field(key, "bool")),
		Bool2:     lib.NewBool[T](lib.Field(key, "bool_2")),
		Byte:      lib.NewBase[byte, T](lib.Field(key, "byte")),
		BytePtr:   lib.NewBasePtr[byte, T](lib.Field(key, "byte_ptr")),
		CreatedAt: lib.NewTime[T](lib.Field(key, "created_at")),
		EnumPtr:   lib.NewBasePtr[model.Role, T](lib.Field(key, "enum_ptr")),
		Float32:   lib.NewNumeric[float32, T](lib.Field(key, "float_32")),
		Float64:   lib.NewNumeric[float64, T](lib.Field(key, "float_64")),
		ID:        lib.NewID[T](lib.Field(key, "id"), "all_field_types"),
		Int:       lib.NewNumeric[int, T](lib.Field(key, "int")),
		Int32:     lib.NewNumeric[int32, T](lib.Field(key, "int_32")),
		Int64:     lib.NewNumeric[int64, T](lib.Field(key, "int_64")),
		IntPtr:    lib.NewNumericPtr[*int, T](lib.Field(key, "int_ptr")),
		Role:      lib.NewBase[model.Role, T](lib.Field(key, "role")),
		String:    lib.NewString[T](lib.Field(key, "string")),
		StringPtr: lib.NewStringPtr[T](lib.Field(key, "string_ptr")),
		Time:      lib.NewTime[T](lib.Field(key, "time")),
		TimePtr:   lib.NewTimePtr[T](lib.Field(key, "time_ptr")),
		URL:       lib.NewURL[T](lib.Field(key, "url")),
		URLPtr:    lib.NewURLPtr[T](lib.Field(key, "url_ptr")),
		UUID:      lib.NewBase[uuid.UUID, T](lib.Field(key, "uuid")),
		UUIDPtr:   lib.NewBasePtr[uuid.UUID, T](lib.Field(key, "uuid_ptr")),
		UpdatedAt: lib.NewTime[T](lib.Field(key, "updated_at")),
		key:       key,
	}
}

type allFieldTypes[T any] struct {
	key       lib.Key[T]
	ID        *lib.ID[T]
	CreatedAt *lib.Time[T]
	UpdatedAt *lib.Time[T]
	String    *lib.String[T]
	StringPtr *lib.StringPtr[T]
	Int       *lib.Numeric[int, T]
	IntPtr    *lib.NumericPtr[*int, T]
	Int32     *lib.Numeric[int32, T]
	Int64     *lib.Numeric[int64, T]
	Float32   *lib.Numeric[float32, T]
	Float64   *lib.Numeric[float64, T]
	Bool      *lib.Bool[T]
	Bool2     *lib.Bool[T]
	Time      *lib.Time[T]
	TimePtr   *lib.TimePtr[T]
	UUID      *lib.Base[uuid.UUID, T]
	UUIDPtr   *lib.BasePtr[uuid.UUID, T]
	URL       *lib.URL[T]
	URLPtr    *lib.URLPtr[T]
	Role      *lib.Base[model.Role, T]
	EnumPtr   *lib.BasePtr[model.Role, T]
	Byte      *lib.Base[byte, T]
	BytePtr   *lib.BasePtr[byte, T]
}

func (n allFieldTypes[T]) Other() *lib.Slice[T, string] {
	return lib.NewSlice[T, string](lib.Field(n.key, "other"))
}

func (n allFieldTypes[T]) StringPtrSlice() *lib.Slice[T, *string] {
	return lib.NewSlice[T, *string](lib.Field(n.key, "string_ptr_slice"))
}

func (n allFieldTypes[T]) StringSlicePtr() *lib.Slice[T, string] {
	return lib.NewSlice[T, string](lib.Field(n.key, "string_slice_ptr"))
}

func (n allFieldTypes[T]) More() *lib.Slice[T, float32] {
	return lib.NewSlice[T, float32](lib.Field(n.key, "more"))
}

func (n allFieldTypes[T]) Roles() *lib.Slice[T, model.Role] {
	return lib.NewSlice[T, model.Role](lib.Field(n.key, "roles"))
}

func (n allFieldTypes[T]) EnumPtrSlice() *lib.Slice[T, model.Role] {
	return lib.NewSlice[T, model.Role](lib.Field(n.key, "enum_ptr_slice"))
}

func (n allFieldTypes[T]) EnumPtrSlicePtr() *lib.Slice[T, model.Role] {
	return lib.NewSlice[T, model.Role](lib.Field(n.key, "enum_ptr_slice_ptr"))
}

func (n allFieldTypes[T]) Login() login[T] {
	return newLogin[T](lib.Field(n.key, "login"))
}

func (n allFieldTypes[T]) StructPtr() someStruct[T] {
	return newSomeStruct[T](lib.Field(n.key, "struct_ptr"))
}

func (n allFieldTypes[T]) StructSlice() *lib.Slice[T, model.SomeStruct] {
	return lib.NewSlice[T, model.SomeStruct](lib.Field(n.key, "struct_slice"))
}

func (n allFieldTypes[T]) StructPtrSlice() *lib.Slice[T, *model.SomeStruct] {
	return lib.NewSlice[T, *model.SomeStruct](lib.Field(n.key, "struct_ptr_slice"))
}

func (n allFieldTypes[T]) StructPtrSlicePtr() *lib.Slice[T, *model.SomeStruct] {
	return lib.NewSlice[T, *model.SomeStruct](lib.Field(n.key, "struct_ptr_slice_ptr"))
}

func (n allFieldTypes[T]) MainGroup() group[T] {
	return newGroup[T](lib.Field(n.key, "main_group"))
}

func (n allFieldTypes[T]) MainGroupPtr() group[T] {
	return newGroup[T](lib.Field(n.key, "main_group_ptr"))
}

func (n allFieldTypes[T]) Groups(filters ...lib.Filter[model.Group]) groupSlice[T] {
	key := lib.Node(n.key, "groups", filters)
	return groupSlice[T]{lib.KeyFilter[T](key), lib.NewSlice[T, model.Group](key)}
}

func (n allFieldTypes[T]) NodePtrSlice(filters ...lib.Filter[model.Group]) groupSlice[T] {
	key := lib.Node(n.key, "node_ptr_slice", filters)
	return groupSlice[T]{lib.KeyFilter[T](key), lib.NewSlice[T, model.Group](key)}
}

func (n allFieldTypes[T]) NodePtrSlicePtr(filters ...lib.Filter[model.Group]) groupSlice[T] {
	key := lib.Node(n.key, "node_ptr_slice_ptr", filters)
	return groupSlice[T]{lib.KeyFilter[T](key), lib.NewSlice[T, model.Group](key)}
}

func (n allFieldTypes[T]) MemberOf(filters ...lib.Filter[model.GroupMember]) groupMemberIn[T] {
	return newGroupMemberIn[T](lib.EdgeIn(n.key, "group_member", filters))
}

func (n allFieldTypes[T]) SliceSlice() *lib.Slice[T, []string] {
	return lib.NewSlice[T, []string](lib.Field(n.key, "slice_slice"))
}

func (n allFieldTypes[T]) ByteSlice() *lib.ByteSlice[T] {
	return lib.NewByteSlice[T](lib.Field(n.key, "byte_slice"))
}

func (n allFieldTypes[T]) ByteSlicePtr() *lib.ByteSlice[T] {
	return lib.NewByteSlice[T](lib.Field(n.key, "byte_slice_ptr"))
}

type allFieldTypesEdges[T any] struct {
	lib.Filter[T]
	key lib.Key[T]
}

func (n allFieldTypesEdges[T]) MemberOf(filters ...lib.Filter[model.GroupMember]) groupMemberIn[T] {
	return newGroupMemberIn[T](lib.EdgeIn(n.key, "group_member", filters))
}

type allFieldTypesSlice[T any] struct {
	lib.Filter[T]
	*lib.Slice[T, model.AllFieldTypes]
}
