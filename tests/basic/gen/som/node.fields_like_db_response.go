// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package som

import (
	"context"
	"errors"
	conv "github.com/go-surreal/som/tests/basic/gen/som/conv"
	query "github.com/go-surreal/som/tests/basic/gen/som/query"
	relate "github.com/go-surreal/som/tests/basic/gen/som/relate"
	model "github.com/go-surreal/som/tests/basic/model"
)

type FieldsLikeDBResponseRepo interface {
	Query() query.NodeFieldsLikeDBResponse
	Create(ctx context.Context, user *model.FieldsLikeDBResponse) error
	CreateWithID(ctx context.Context, id string, user *model.FieldsLikeDBResponse) error
	Read(ctx context.Context, id string) (*model.FieldsLikeDBResponse, bool, error)
	Update(ctx context.Context, user *model.FieldsLikeDBResponse) error
	Delete(ctx context.Context, user *model.FieldsLikeDBResponse) error
	Relate() *relate.FieldsLikeDBResponse
}

func (c *ClientImpl) FieldsLikeDBResponseRepo() FieldsLikeDBResponseRepo {
	return &fieldsLikeDBResponse{repo: &repo[model.FieldsLikeDBResponse, conv.FieldsLikeDBResponse]{
		db:        c.db,
		marshal:   c.marshal,
		unmarshal: c.unmarshal,
		name:      "fields_like_db_response",
		convTo:    conv.ToFieldsLikeDBResponse,
		convFrom:  conv.FromFieldsLikeDBResponse}}
}

type fieldsLikeDBResponse struct {
	*repo[model.FieldsLikeDBResponse, conv.FieldsLikeDBResponse]
}

func (r *fieldsLikeDBResponse) Query() query.NodeFieldsLikeDBResponse {
	return query.NewFieldsLikeDBResponse(r.db, r.unmarshal)
}

func (r *fieldsLikeDBResponse) Create(ctx context.Context, fieldsLikeDBResponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDBResponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDBResponse.ID() != "" {
		return errors.New("given node already has an id")
	}
	return r.create(ctx, fieldsLikeDBResponse)
}

func (r *fieldsLikeDBResponse) CreateWithID(ctx context.Context, id string, fieldsLikeDBResponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDBResponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDBResponse.ID() != "" {
		return errors.New("given node already has an id")
	}
	return r.createWithID(ctx, fieldsLikeDBResponse.ID(), fieldsLikeDBResponse)
}

func (r *fieldsLikeDBResponse) Read(ctx context.Context, id string) (*model.FieldsLikeDBResponse, bool, error) {
	return r.read(ctx, id)
}

func (r *fieldsLikeDBResponse) Update(ctx context.Context, fieldsLikeDBResponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDBResponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDBResponse.ID() == "" {
		return errors.New("cannot update FieldsLikeDBResponse without existing record ID")
	}
	return r.update(ctx, fieldsLikeDBResponse.ID(), fieldsLikeDBResponse)
}

func (r *fieldsLikeDBResponse) Delete(ctx context.Context, fieldsLikeDBResponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDBResponse == nil {
		return errors.New("the passed node must not be nil")
	}
	return r.delete(ctx, fieldsLikeDBResponse.ID(), fieldsLikeDBResponse)
}

func (r *fieldsLikeDBResponse) Relate() *relate.FieldsLikeDBResponse {
	return relate.NewFieldsLikeDBResponse(r.db, r.unmarshal)
}
