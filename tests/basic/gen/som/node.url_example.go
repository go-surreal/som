// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package som

import (
	"context"
	"errors"
	"fmt"
	conv "github.com/go-surreal/som/tests/basic/gen/som/conv"
	query "github.com/go-surreal/som/tests/basic/gen/som/query"
	relate "github.com/go-surreal/som/tests/basic/gen/som/relate"
	model "github.com/go-surreal/som/tests/basic/model"
)

type URLExampleRepo interface {
	Query() query.Builder[model.URLExample, conv.URLExample]
	Create(ctx context.Context, user *model.URLExample) error
	CreateWithID(ctx context.Context, id string, user *model.URLExample) error
	Read(ctx context.Context, id string) (*model.URLExample, bool, error)
	Update(ctx context.Context, user *model.URLExample) error
	Delete(ctx context.Context, user *model.URLExample) error
	Relate() *relate.URLExample
}

func (c *ClientImpl) URLExampleRepo() URLExampleRepo {
	return &urlexample{db: c.db, marshal: c.marshal, unmarshal: c.unmarshal}
}

type urlexample struct {
	db        Database
	marshal   func(val any) ([]byte, error)
	unmarshal func(buf []byte, val any) error
}

func (n *urlexample) Query() query.Builder[model.URLExample, conv.URLExample] {
	return query.NewURLExample(n.db, n.unmarshal)
}

func (n *urlexample) Create(ctx context.Context, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	if urlexample.ID() != "" {
		return errors.New("given node already has an id")
	}
	key := "url_example:ulid()"
	data := conv.FromURLExample(urlexample)
	raw, err := n.db.Create(ctx, key, data)
	if err != nil {
		return fmt.Errorf("could not create entity: %w", err)
	}
	var convNode *conv.URLExample
	err = n.unmarshal(raw, &convNode)
	if err != nil {
		return fmt.Errorf("could not unmarshal response: %w", err)
	}
	*urlexample = *conv.ToURLExample(convNode)
	return nil
}

func (n *urlexample) CreateWithID(ctx context.Context, id string, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	if urlexample.ID() != "" {
		return errors.New("creating node with preset ID not allowed, use CreateWithID for that")
	}
	key := "url_example:" + "⟨" + id + "⟩"
	data := conv.FromURLExample(urlexample)
	res, err := n.db.Create(ctx, key, data)
	if err != nil {
		return fmt.Errorf("could not create entity: %w", err)
	}
	var convNode *conv.URLExample
	err = n.unmarshal(res, &convNode)
	if err != nil {
		return fmt.Errorf("could not unmarshal entity: %w", err)
	}
	*urlexample = *conv.ToURLExample(convNode)
	return nil
}

func (n *urlexample) Read(ctx context.Context, id string) (*model.URLExample, bool, error) {
	res, err := n.db.Select(ctx, "url_example:⟨"+id+"⟩")
	if err != nil {
		return nil, false, fmt.Errorf("could not read entity: %w", err)
	}
	var convNode *conv.URLExample
	err = n.unmarshal(res, &convNode)
	if err != nil {
		return nil, false, fmt.Errorf("could not unmarshal entity: %w", err)
	}
	return conv.ToURLExample(convNode), true, nil
}

func (n *urlexample) Update(ctx context.Context, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	if urlexample.ID() == "" {
		return errors.New("cannot update URLExample without existing record ID")
	}
	data := conv.FromURLExample(urlexample)
	res, err := n.db.Update(ctx, "url_example:⟨"+urlexample.ID()+"⟩", data)
	if err != nil {
		return fmt.Errorf("could not update entity: %w", err)
	}
	var convNode *conv.URLExample
	err = n.unmarshal(res, &convNode)
	if err != nil {
		return fmt.Errorf("could not unmarshal entity: %w", err)
	}
	*urlexample = *conv.ToURLExample(convNode)
	return nil
}

func (n *urlexample) Delete(ctx context.Context, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	_, err := n.db.Delete(ctx, "url_example:⟨"+urlexample.ID()+"⟩")
	if err != nil {
		return fmt.Errorf("could not delete entity: %w", err)
	}
	return nil
}

func (n *urlexample) Relate() *relate.URLExample {
	return relate.NewURLExample(n.db, n.unmarshal)
}
