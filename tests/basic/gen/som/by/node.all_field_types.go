// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package by

import (
	lib "github.com/go-surreal/som/tests/basic/gen/som/internal/lib"
	model "github.com/go-surreal/som/tests/basic/model"
)

var AllFieldTypes = newAllFieldTypes[model.AllFieldTypes]("")

func newAllFieldTypes[M any](key string) allFieldTypes[M] {
	return allFieldTypes[M]{
		CreatedAt:   lib.NewBaseSort[M](keyed(key, "created_at")),
		Duration:    lib.NewBaseSort[M](keyed(key, "duration")),
		DurationNil: lib.NewBaseSort[M](keyed(key, "duration_nil")),
		DurationPtr: lib.NewBaseSort[M](keyed(key, "duration_ptr")),
		Float32:     lib.NewBaseSort[M](keyed(key, "float_32")),
		Float64:     lib.NewBaseSort[M](keyed(key, "float_64")),
		ID:          lib.NewBaseSort[M](keyed(key, "id")),
		Int:         lib.NewBaseSort[M](keyed(key, "int")),
		Int16:       lib.NewBaseSort[M](keyed(key, "int_16")),
		Int16Ptr:    lib.NewBaseSort[M](keyed(key, "int_16_ptr")),
		Int32:       lib.NewBaseSort[M](keyed(key, "int_32")),
		Int32Ptr:    lib.NewBaseSort[M](keyed(key, "int_32_ptr")),
		Int64:       lib.NewBaseSort[M](keyed(key, "int_64")),
		Int64Ptr:    lib.NewBaseSort[M](keyed(key, "int_64_ptr")),
		Int8:        lib.NewBaseSort[M](keyed(key, "int_8")),
		Int8Ptr:     lib.NewBaseSort[M](keyed(key, "int_8_ptr")),
		IntPtr:      lib.NewBaseSort[M](keyed(key, "int_ptr")),
		Rune:        lib.NewBaseSort[M](keyed(key, "rune")),
		String:      lib.NewStringSort[M](keyed(key, "string")),
		StringPtr:   lib.NewStringSort[M](keyed(key, "string_ptr")),
		Time:        lib.NewBaseSort[M](keyed(key, "time")),
		TimeNil:     lib.NewBaseSort[M](keyed(key, "time_nil")),
		TimePtr:     lib.NewBaseSort[M](keyed(key, "time_ptr")),
		Uint16:      lib.NewBaseSort[M](keyed(key, "uint_16")),
		Uint16Ptr:   lib.NewBaseSort[M](keyed(key, "uint_16_ptr")),
		Uint32:      lib.NewBaseSort[M](keyed(key, "uint_32")),
		Uint32Ptr:   lib.NewBaseSort[M](keyed(key, "uint_32_ptr")),
		Uint8:       lib.NewBaseSort[M](keyed(key, "uint_8")),
		Uint8Ptr:    lib.NewBaseSort[M](keyed(key, "uint_8_ptr")),
		UpdatedAt:   lib.NewBaseSort[M](keyed(key, "updated_at")),
		key:         key,
	}
}

type allFieldTypes[M any] struct {
	key         string
	ID          *lib.BaseSort[M]
	CreatedAt   *lib.BaseSort[M]
	UpdatedAt   *lib.BaseSort[M]
	String      *lib.StringSort[M]
	StringPtr   *lib.StringSort[M]
	Int         *lib.BaseSort[M]
	IntPtr      *lib.BaseSort[M]
	Int8        *lib.BaseSort[M]
	Int8Ptr     *lib.BaseSort[M]
	Int16       *lib.BaseSort[M]
	Int16Ptr    *lib.BaseSort[M]
	Int32       *lib.BaseSort[M]
	Int32Ptr    *lib.BaseSort[M]
	Int64       *lib.BaseSort[M]
	Int64Ptr    *lib.BaseSort[M]
	Uint8       *lib.BaseSort[M]
	Uint8Ptr    *lib.BaseSort[M]
	Uint16      *lib.BaseSort[M]
	Uint16Ptr   *lib.BaseSort[M]
	Uint32      *lib.BaseSort[M]
	Uint32Ptr   *lib.BaseSort[M]
	Float32     *lib.BaseSort[M]
	Float64     *lib.BaseSort[M]
	Rune        *lib.BaseSort[M]
	Time        *lib.BaseSort[M]
	TimePtr     *lib.BaseSort[M]
	TimeNil     *lib.BaseSort[M]
	Duration    *lib.BaseSort[M]
	DurationPtr *lib.BaseSort[M]
	DurationNil *lib.BaseSort[M]
}

func (n allFieldTypes[M]) MainGroup() group[M] {
	return newGroup[M](keyed(n.key, "main_group"))
}

func (n allFieldTypes[M]) MainGroupPtr() group[M] {
	return newGroup[M](keyed(n.key, "main_group_ptr"))
}
