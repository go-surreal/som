// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package som

import (
	"context"
	"errors"
	som "github.com/go-surreal/som"
	conv "github.com/go-surreal/som/tests/basic/gen/som/conv"
	query "github.com/go-surreal/som/tests/basic/gen/som/query"
	relate "github.com/go-surreal/som/tests/basic/gen/som/relate"
	model "github.com/go-surreal/som/tests/basic/model"
)

type FieldsLikeDBResponseRepo interface {
	Query() query.Builder[model.FieldsLikeDBResponse, conv.FieldsLikeDBResponse]
	Create(ctx context.Context, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error
	CreateWithID(ctx context.Context, id string, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error
	Read(ctx context.Context, id *som.ID) (*model.FieldsLikeDBResponse, bool, error)
	Update(ctx context.Context, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error
	Delete(ctx context.Context, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error
	Refresh(ctx context.Context, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error
	Relate() *relate.FieldsLikeDBResponse
}

// FieldsLikeDBResponseRepo returns a new repository instance for the FieldsLikeDBResponse model.
func (c *ClientImpl) FieldsLikeDBResponseRepo() FieldsLikeDBResponseRepo {
	return &fieldsLikeDbresponse{repo: &repo[model.FieldsLikeDBResponse, conv.FieldsLikeDBResponse]{
		db:       c.db,
		name:     "fields_like_db_response",
		convTo:   conv.ToFieldsLikeDBResponsePtr,
		convFrom: conv.FromFieldsLikeDBResponsePtr}}
}

type fieldsLikeDbresponse struct {
	*repo[model.FieldsLikeDBResponse, conv.FieldsLikeDBResponse]
}

// Query returns a new query builder for the FieldsLikeDBResponse model.
func (r *fieldsLikeDbresponse) Query() query.Builder[model.FieldsLikeDBResponse, conv.FieldsLikeDBResponse] {
	return query.NewFieldsLikeDBResponse(r.db)
}

// Create creates a new record for the FieldsLikeDBResponse model.
// The ID will be generated automatically as a ULID.
func (r *fieldsLikeDbresponse) Create(ctx context.Context, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDbresponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDbresponse.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.create(ctx, fieldsLikeDbresponse)
}

// CreateWithID creates a new record for the FieldsLikeDBResponse model with the given id.
func (r *fieldsLikeDbresponse) CreateWithID(ctx context.Context, id string, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDbresponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDbresponse.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.createWithID(ctx, id, fieldsLikeDbresponse)
}

// Read returns the record for the given id, if it exists.
// The returned bool indicates whether the record was found or not.
func (r *fieldsLikeDbresponse) Read(ctx context.Context, id *som.ID) (*model.FieldsLikeDBResponse, bool, error) {
	return r.read(ctx, id)
}

// Update updates the record for the given model.
func (r *fieldsLikeDbresponse) Update(ctx context.Context, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDbresponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDbresponse.ID() == nil {
		return errors.New("cannot update FieldsLikeDBResponse without existing record ID")
	}
	return r.update(ctx, fieldsLikeDbresponse.ID(), fieldsLikeDbresponse)
}

// Delete deletes the record for the given model.
func (r *fieldsLikeDbresponse) Delete(ctx context.Context, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDbresponse == nil {
		return errors.New("the passed node must not be nil")
	}
	return r.delete(ctx, fieldsLikeDbresponse.ID(), fieldsLikeDbresponse)
}

// Refresh refreshes the given model with the remote data.
func (r *fieldsLikeDbresponse) Refresh(ctx context.Context, fieldsLikeDbresponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDbresponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDbresponse.ID() == nil {
		return errors.New("cannot refresh FieldsLikeDBResponse without existing record ID")
	}
	return r.refresh(ctx, fieldsLikeDbresponse.ID(), fieldsLikeDbresponse)
}

// Relate returns a new relate instance for the FieldsLikeDBResponse model.
func (r *fieldsLikeDbresponse) Relate() *relate.FieldsLikeDBResponse {
	return relate.NewFieldsLikeDBResponse(r.db)
}
