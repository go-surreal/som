// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package conv

import (
	v2 "github.com/fxamacker/cbor/v2"
	sombase "github.com/go-surreal/som/tests/basic/gen/som/sombase"
	model "github.com/go-surreal/som/tests/basic/model"
)

type FieldsLikeDBResponse struct {
	ID     *sombase.ID `cbor:"id,omitempty"`
	Time   string      `cbor:"time"`
	Status string      `cbor:"status"`
	Detail string      `cbor:"detail"`
	Result []string    `cbor:"result"`
}

func FromFieldsLikeDBResponse(data model.FieldsLikeDBResponse) FieldsLikeDBResponse {
	return FieldsLikeDBResponse{
		Detail: data.Detail,
		Result: data.Result,
		Status: data.Status,
		Time:   data.Time,
	}
}
func FromFieldsLikeDBResponsePtr(data *model.FieldsLikeDBResponse) *FieldsLikeDBResponse {
	if data == nil {
		return nil
	}
	return &FieldsLikeDBResponse{
		Detail: data.Detail,
		Result: data.Result,
		Status: data.Status,
		Time:   data.Time,
	}
}

func ToFieldsLikeDBResponse(data FieldsLikeDBResponse) model.FieldsLikeDBResponse {
	return model.FieldsLikeDBResponse{
		Detail: data.Detail,
		Node:   sombase.NewNode(data.ID),
		Result: data.Result,
		Status: data.Status,
		Time:   data.Time,
	}
}
func ToFieldsLikeDBResponsePtr(data *FieldsLikeDBResponse) *model.FieldsLikeDBResponse {
	if data == nil {
		return nil
	}
	return &model.FieldsLikeDBResponse{
		Detail: data.Detail,
		Node:   sombase.NewNode(data.ID),
		Result: data.Result,
		Status: data.Status,
		Time:   data.Time,
	}
}

type fieldsLikeDbresponseLink struct {
	FieldsLikeDBResponse
	ID *sombase.ID
}

func (f *fieldsLikeDbresponseLink) MarshalCBOR() ([]byte, error) {
	if f == nil {
		return nil, nil
	}
	return v2.Marshal(f.ID)
}

func (f *fieldsLikeDbresponseLink) UnmarshalCBOR(data []byte) error {
	if err := v2.Unmarshal(data, &f.ID); err == nil {
		return nil
	}
	type alias fieldsLikeDbresponseLink
	var link alias
	err := v2.Unmarshal(data, &link)
	if err == nil {
		*f = fieldsLikeDbresponseLink(link)
	}
	return err
}

func fromFieldsLikeDBResponseLink(link *fieldsLikeDbresponseLink) model.FieldsLikeDBResponse {
	if link == nil {
		return model.FieldsLikeDBResponse{}
	}
	res := FieldsLikeDBResponse(link.FieldsLikeDBResponse)
	return ToFieldsLikeDBResponse(res)
}

func fromFieldsLikeDBResponseLinkPtr(link *fieldsLikeDbresponseLink) *model.FieldsLikeDBResponse {
	if link == nil {
		return nil
	}
	res := FieldsLikeDBResponse(link.FieldsLikeDBResponse)
	out := ToFieldsLikeDBResponse(res)
	return &out
}

func toFieldsLikeDBResponseLink(node model.FieldsLikeDBResponse) *fieldsLikeDbresponseLink {
	if node.ID() == nil {
		return nil
	}
	link := fieldsLikeDbresponseLink{FieldsLikeDBResponse: FromFieldsLikeDBResponse(node), ID: node.ID()}
	return &link
}

func toFieldsLikeDBResponseLinkPtr(node *model.FieldsLikeDBResponse) *fieldsLikeDbresponseLink {
	if node == nil || node.ID() == nil {
		return nil
	}
	link := fieldsLikeDbresponseLink{FieldsLikeDBResponse: FromFieldsLikeDBResponse(*node), ID: node.ID()}
	return &link
}
