// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package relate

import (
	"context"
	"errors"
	"fmt"
	conv "github.com/go-surreal/som/tests/basic/gen/som/conv"
	model "github.com/go-surreal/som/tests/basic/model"
)

type groupMember struct {
	db Database
}

// Create creates a new edge between the given nodes.
// Note: The ID type if both nodes must be a string or number for now.

func (e groupMember) Create(ctx context.Context, edge *model.GroupMember) error {
	if edge == nil {
		return errors.New("the given edge must not be nil")
	}
	if edge.ID() != nil {
		return errors.New("ID must not be set for an edge to be created")
	}
	if edge.User.ID() == nil {
		return errors.New("ID of the incoming node 'User' must not be empty")
	}
	if edge.Group.ID() == nil {
		return errors.New("ID of the outgoing node 'Group' must not be empty")
	}
	query := "RELATE " + "user:" + edge.User.ID().String() + "->group_member->" + "group:" + edge.Group.ID().String() + " CONTENT $data"
	data := conv.FromGroupMember(*edge)
	res, err := e.db.Query(ctx, query, map[string]any{"data": data})
	if err != nil {
		return fmt.Errorf("could not create relation: %w", err)
	}
	var convEdge *conv.GroupMember
	err = e.db.Unmarshal(res, &convEdge)
	if err != nil {
		return fmt.Errorf("could not unmarshal relation: %w", err)
	}
	*edge = conv.ToGroupMember(convEdge)
	return nil
}

func (groupMember) Update(edge *model.GroupMember) error {
	// TODO: implement!
	return errors.New("not yet implemented")
}

func (groupMember) Delete(edge *model.GroupMember) error {
	// TODO: implement!
	// https://surrealdb.com/docs/surrealdb/surrealql/statements/delete#deleting-graph-edges
	return errors.New("not yet implemented")
}
