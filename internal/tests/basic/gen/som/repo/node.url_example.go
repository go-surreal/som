// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package repo

import (
	"context"
	"errors"
	som "github.com/go-surreal/som/tests/basic/gen/som"
	conv "github.com/go-surreal/som/tests/basic/gen/som/conv"
	query "github.com/go-surreal/som/tests/basic/gen/som/query"
	relate "github.com/go-surreal/som/tests/basic/gen/som/relate"
	model "github.com/go-surreal/som/tests/basic/model"
)

type URLExampleRepo interface {
	Query() query.Builder[model.URLExample, conv.URLExample]
	Create(ctx context.Context, urlexample *model.URLExample) error
	CreateWithID(ctx context.Context, id string, urlexample *model.URLExample) error
	Read(ctx context.Context, id *som.ID) (*model.URLExample, bool, error)
	Update(ctx context.Context, urlexample *model.URLExample) error
	Delete(ctx context.Context, urlexample *model.URLExample) error
	Refresh(ctx context.Context, urlexample *model.URLExample) error
	Relate() *relate.URLExample
}

// URLExampleRepo returns a new repository instance for the URLExample model.
func (c *ClientImpl) URLExampleRepo() URLExampleRepo {
	return &urlexample{repo: &repo[model.URLExample, conv.URLExample]{
		db:       c.db,
		name:     "url_example",
		convTo:   conv.ToURLExamplePtr,
		convFrom: conv.FromURLExamplePtr}}
}

type urlexample struct {
	*repo[model.URLExample, conv.URLExample]
}

// Query returns a new query builder for the URLExample model.
func (r *urlexample) Query() query.Builder[model.URLExample, conv.URLExample] {
	return query.NewURLExample(r.db)
}

// Create creates a new record for the URLExample model.
// The ID will be generated automatically as a ULID.
func (r *urlexample) Create(ctx context.Context, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	if urlexample.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.create(ctx, urlexample)
}

// CreateWithID creates a new record for the URLExample model with the given id.
func (r *urlexample) CreateWithID(ctx context.Context, id string, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	if urlexample.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.createWithID(ctx, id, urlexample)
}

// Read returns the record for the given id, if it exists.
// The returned bool indicates whether the record was found or not.
func (r *urlexample) Read(ctx context.Context, id *som.ID) (*model.URLExample, bool, error) {
	return r.read(ctx, id)
}

// Update updates the record for the given model.
func (r *urlexample) Update(ctx context.Context, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	if urlexample.ID() == nil {
		return errors.New("cannot update URLExample without existing record ID")
	}
	return r.update(ctx, urlexample.ID(), urlexample)
}

// Delete deletes the record for the given model.
func (r *urlexample) Delete(ctx context.Context, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	return r.delete(ctx, urlexample.ID(), urlexample)
}

// Refresh refreshes the given model with the remote data.
func (r *urlexample) Refresh(ctx context.Context, urlexample *model.URLExample) error {
	if urlexample == nil {
		return errors.New("the passed node must not be nil")
	}
	if urlexample.ID() == nil {
		return errors.New("cannot refresh URLExample without existing record ID")
	}
	return r.refresh(ctx, urlexample.ID(), urlexample)
}

// Relate returns a new relate instance for the URLExample model.
func (r *urlexample) Relate() *relate.URLExample {
	return relate.NewURLExample(r.db)
}
