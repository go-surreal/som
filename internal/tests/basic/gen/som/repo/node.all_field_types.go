// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package repo

import (
	"context"
	"errors"
	som "github.com/go-surreal/som/tests/basic/gen/som"
	conv "github.com/go-surreal/som/tests/basic/gen/som/conv"
	query "github.com/go-surreal/som/tests/basic/gen/som/query"
	relate "github.com/go-surreal/som/tests/basic/gen/som/relate"
	model "github.com/go-surreal/som/tests/basic/model"
)

type AllFieldTypesRepo interface {
	Query() query.Builder[model.AllFieldTypes, conv.AllFieldTypes]
	Create(ctx context.Context, allFieldTypes *model.AllFieldTypes) error
	CreateWithID(ctx context.Context, id string, allFieldTypes *model.AllFieldTypes) error
	Read(ctx context.Context, id *som.ID) (*model.AllFieldTypes, bool, error)
	Update(ctx context.Context, allFieldTypes *model.AllFieldTypes) error
	Delete(ctx context.Context, allFieldTypes *model.AllFieldTypes) error
	Refresh(ctx context.Context, allFieldTypes *model.AllFieldTypes) error
	Relate() *relate.AllFieldTypes
}

// AllFieldTypesRepo returns a new repository instance for the AllFieldTypes model.
func (c *ClientImpl) AllFieldTypesRepo() AllFieldTypesRepo {
	return &allFieldTypes{repo: &repo[model.AllFieldTypes, conv.AllFieldTypes]{
		db:       c.db,
		name:     "all_field_types",
		convTo:   conv.ToAllFieldTypesPtr,
		convFrom: conv.FromAllFieldTypesPtr}}
}

type allFieldTypes struct {
	*repo[model.AllFieldTypes, conv.AllFieldTypes]
}

// Query returns a new query builder for the AllFieldTypes model.
func (r *allFieldTypes) Query() query.Builder[model.AllFieldTypes, conv.AllFieldTypes] {
	return query.NewAllFieldTypes(r.db)
}

// Create creates a new record for the AllFieldTypes model.
// The ID will be generated automatically as a ULID.
func (r *allFieldTypes) Create(ctx context.Context, allFieldTypes *model.AllFieldTypes) error {
	if allFieldTypes == nil {
		return errors.New("the passed node must not be nil")
	}
	if allFieldTypes.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.create(ctx, allFieldTypes)
}

// CreateWithID creates a new record for the AllFieldTypes model with the given id.
func (r *allFieldTypes) CreateWithID(ctx context.Context, id string, allFieldTypes *model.AllFieldTypes) error {
	if allFieldTypes == nil {
		return errors.New("the passed node must not be nil")
	}
	if allFieldTypes.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.createWithID(ctx, id, allFieldTypes)
}

// Read returns the record for the given id, if it exists.
// The returned bool indicates whether the record was found or not.
func (r *allFieldTypes) Read(ctx context.Context, id *som.ID) (*model.AllFieldTypes, bool, error) {
	return r.read(ctx, id)
}

// Update updates the record for the given model.
func (r *allFieldTypes) Update(ctx context.Context, allFieldTypes *model.AllFieldTypes) error {
	if allFieldTypes == nil {
		return errors.New("the passed node must not be nil")
	}
	if allFieldTypes.ID() == nil {
		return errors.New("cannot update AllFieldTypes without existing record ID")
	}
	return r.update(ctx, allFieldTypes.ID(), allFieldTypes)
}

// Delete deletes the record for the given model.
func (r *allFieldTypes) Delete(ctx context.Context, allFieldTypes *model.AllFieldTypes) error {
	if allFieldTypes == nil {
		return errors.New("the passed node must not be nil")
	}
	return r.delete(ctx, allFieldTypes.ID(), allFieldTypes)
}

// Refresh refreshes the given model with the remote data.
func (r *allFieldTypes) Refresh(ctx context.Context, allFieldTypes *model.AllFieldTypes) error {
	if allFieldTypes == nil {
		return errors.New("the passed node must not be nil")
	}
	if allFieldTypes.ID() == nil {
		return errors.New("cannot refresh AllFieldTypes without existing record ID")
	}
	return r.refresh(ctx, allFieldTypes.ID(), allFieldTypes)
}

// Relate returns a new relate instance for the AllFieldTypes model.
func (r *allFieldTypes) Relate() *relate.AllFieldTypes {
	return relate.NewAllFieldTypes(r.db)
}
