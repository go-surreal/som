# Taskfile (https://taskfile.dev)

version: "3"

# When tasks/commands are executed in parallel, the
# output should be prefixed with the name of the task,
# so it is easier to follow what is happening.
output: "prefixed"

# The interval to check for changes when watching tasks.
interval: "500ms"

tasks:

  run:
    aliases: [ r ]
    desc: "Run the somgen cli tool."
    cmds:
      - cd ./cmd/somgen && go run main.go -- {{.CLI_ARGS}}

  gen:
    aliases: [ g ]
    desc: "Generate code for the example codebase."
    cmds:
      - cd examples/testing && go generate gen.go
      - cd examples/basic && go generate gen.go
      - cd examples/movie && go generate gen.go
    sources:
      - examples/testing/model/**/*
      - examples/basic/model/**/*
      - examples/movie/model/**/*
    generates:
      - examples/testing/gen/som/**/*
      - examples/basic/gen/som/**/*
      - examples/movie/gen/som/**/*

  example:
    aliases: [ e ]
    desc: "Run the test code for the example codebase."
    deps: [ gen ]
    cmds:
      - cd ./test && go run main.go

  lint:
    aliases: [ l ]
    desc: "Lint the codebase with the golangci-lint tool."
    cmds:
      - golangci-lint run

  test:
    aliases: [ t ]
    desc: "Execute all go tests."
    deps: [ gen ]
    cmds:
      - go test ./...
      - cd examples/testing && go test ./...
      - cd examples/basic && go test ./...
      - cd examples/movie && go test ./...

  benchmark:
    aliases: [ b ]
    desc: "Run benchmark tests."
    cmds:
      - go test -bench=. | tee ../graphic/out.dat ; \
        awk '/Benchmark/{count ++; gsub(/BenchmarkTest/,""); printf("%d,%s,%s,%s\n",count,$$1,$$2,$$3)}' ../graphic/out.dat > ../graphic/final.dat ; \
        gnuplot -e "file_path='../graphic/final.dat'" -e "graphic_file_name='../graphic/operations.png'" -e "y_label='number of operations'" -e "y_range_min='000000000''" -e "y_range_max='400000000'" -e "column_1=1" -e "column_2=3" ../graphic/performance.gp ; \
        gnuplot -e "file_path='../graphic/final.dat'" -e "graphic_file_name='../graphic/time_operations.png'" -e "y_label='each operation in nanoseconds'" -e "y_range_min='000''" -e "y_range_max='45000'" -e "column_1=1" -e "column_2=4" ../graphic/performance.gp ; \
        rm -f ../graphic/out.dat ../graphic/final.dat ; \
        echo "'graphic/operations.png' and 'graphic/time_operations.png' graphics were generated."
