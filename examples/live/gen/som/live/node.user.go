// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package live

import (
	"context"
	"errors"
	"fmt"
	conv "github.com/marcbinz/som/examples/live/gen/som/conv"
	lib "github.com/marcbinz/som/examples/live/gen/som/internal/lib"
	with "github.com/marcbinz/som/examples/live/gen/som/with"
	model "github.com/marcbinz/som/examples/live/model"
	surrealdbgo "github.com/surrealdb/surrealdb.go"
	"strings"
	"time"
)

type User struct {
	db    Database
	query lib.Query[model.User]
}

func NewUser(db Database) User {
	return User{
		db:    db,
		query: lib.NewQuery[model.User]("user"),
	}
}

// Filter adds a where statement to the query to
// select records based on the given conditions.
//
// Use where.All to chain multiple conditions
// together that all need to match.
// Use where.Any to chain multiple conditions
// together where at least one needs to match.
func (q User) Filter(filters ...lib.Filter[model.User]) User {
	q.query.Where = append(q.query.Where, filters...)
	return q
}

func (q User) Subscribe(ctx context.Context) (<-chan Change[model.User], <-chan error) {
	return nil, nil
}

// Describe returns a string representation of the query.
// While this might be a valid SurrealDB query, it
// should only be used for debugging purposes.
func (q User) Describe() string {
	res := q.query.BuildAsAll()
	return strings.TrimSpace(res.Statement)
}

type Change[N any] interface {
	change()
}

type Create[N any] func() N

func (c Create[N]) change() {}

type Update[N any] func() N

func (c Update[N]) change() {}

type Delete[N any] func() N

func (c Delete[N]) change() {}
