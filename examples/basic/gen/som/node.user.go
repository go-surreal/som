// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package som

import (
	"context"
	"errors"
	"fmt"
	conv "github.com/marcbinz/som/examples/basic/gen/som/conv"
	query "github.com/marcbinz/som/examples/basic/gen/som/query"
	relate "github.com/marcbinz/som/examples/basic/gen/som/relate"
	model "github.com/marcbinz/som/examples/basic/model"
	constants "github.com/surrealdb/surrealdb.go/pkg/constants"
	marshal "github.com/surrealdb/surrealdb.go/pkg/marshal"
	"time"
)

type UserRepo interface {
	Query() query.NodeUser
	Create(ctx context.Context, user *model.User) error
	CreateWithID(ctx context.Context, id string, user *model.User) error
	Read(ctx context.Context, id string) (*model.User, bool, error)
	Update(ctx context.Context, user *model.User) error
	Delete(ctx context.Context, user *model.User) error
	Relate() *relate.User
}

func (c *ClientImpl) UserRepo() UserRepo {
	return &user{db: c.db}
}

type user struct {
	db Database
}

func (n *user) Query() query.NodeUser {
	return query.NewUser(n.db)
}

func (n *user) Create(ctx context.Context, user *model.User) error {
	if user == nil {
		return errors.New("the passed node must not be nil")
	}
	if user.ID() != "" {
		return errors.New("given node already has an id")
	}
	key := "user"
	data := conv.FromUser(*user)
	data.CreatedAt = time.Now()
	data.UpdatedAt = data.CreatedAt
	raw, err := n.db.Create(key, data)
	if err != nil {
		return fmt.Errorf("could not create entity: %w", err)
	}
	var convNodes []conv.User
	err = marshal.Unmarshal(raw, &convNodes)
	if err != nil {
		return fmt.Errorf("could not unmarshal response: %w", err)
	}
	if len(convNodes) < 1 {
		return errors.New("response is empty")
	}
	*user = conv.ToUser(convNodes[0])
	return nil
}

func (n *user) CreateWithID(ctx context.Context, id string, user *model.User) error {
	if user == nil {
		return errors.New("the passed node must not be nil")
	}
	if user.ID() != "" {
		return errors.New("creating node with preset ID not allowed, use CreateWithID for that")
	}
	key := "user:" + "⟨" + id + "⟩"
	data := conv.FromUser(*user)
	data.CreatedAt = time.Now()
	data.UpdatedAt = data.CreatedAt
	convNode, err := marshal.SmartUnmarshal[conv.User](n.db.Create(key, data))
	if err != nil {
		return fmt.Errorf("could not create entity: %w", err)
	}
	*user = conv.ToUser(convNode[0])
	return nil
}

func (n *user) Read(ctx context.Context, id string) (*model.User, bool, error) {
	convNode, err := marshal.SmartUnmarshal[conv.User](n.db.Select("user:⟨" + id + "⟩"))
	if errors.Is(err, constants.ErrNoRow) {
		return nil, false, nil
	}
	if err != nil {
		return nil, false, fmt.Errorf("could not read entity: %w", err)
	}
	node := conv.ToUser(convNode[0])
	return &node, true, nil
}

func (n *user) Update(ctx context.Context, user *model.User) error {
	if user == nil {
		return errors.New("the passed node must not be nil")
	}
	if user.ID() == "" {
		return errors.New("cannot update User without existing record ID")
	}
	data := conv.FromUser(*user)
	data.UpdatedAt = time.Now()
	convNode, err := marshal.SmartUnmarshal[conv.User](n.db.Update("user:⟨"+user.ID()+"⟩", data))
	if err != nil {
		return fmt.Errorf("could not update entity: %w", err)
	}
	*user = conv.ToUser(convNode[0])
	return nil
}

func (n *user) Delete(ctx context.Context, user *model.User) error {
	if user == nil {
		return errors.New("the passed node must not be nil")
	}
	_, err := n.db.Delete("user:⟨" + user.ID() + "⟩")
	if err != nil {
		return fmt.Errorf("could not delete entity: %w", err)
	}
	return nil
}

func (n *user) Relate() *relate.User {
	return relate.NewUser(n.db)
}
