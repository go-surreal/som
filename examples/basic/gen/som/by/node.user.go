// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package by

import (
	lib "github.com/go-surreal/som/examples/basic/gen/som/internal/lib"
	model "github.com/go-surreal/som/examples/basic/model"
)

var User = newUser[model.User]("")

func newUser[T any](key string) user[T] {
	return user[T]{
		CreatedAt:   lib.NewBaseSort[T](keyed(key, "created_at")),
		Duration:    lib.NewBaseSort[T](keyed(key, "duration")),
		DurationPtr: lib.NewBaseSort[T](keyed(key, "duration_ptr")),
		Float32:     lib.NewBaseSort[T](keyed(key, "float_32")),
		Float64:     lib.NewBaseSort[T](keyed(key, "float_64")),
		ID:          lib.NewBaseSort[T](keyed(key, "id")),
		Int:         lib.NewBaseSort[T](keyed(key, "int")),
		Int32:       lib.NewBaseSort[T](keyed(key, "int_32")),
		Int64:       lib.NewBaseSort[T](keyed(key, "int_64")),
		IntPtr:      lib.NewBaseSort[T](keyed(key, "int_ptr")),
		String:      lib.NewStringSort[T](keyed(key, "string")),
		StringPtr:   lib.NewStringSort[T](keyed(key, "string_ptr")),
		Time:        lib.NewBaseSort[T](keyed(key, "time")),
		TimePtr:     lib.NewBaseSort[T](keyed(key, "time_ptr")),
		UpdatedAt:   lib.NewBaseSort[T](keyed(key, "updated_at")),
		key:         key,
	}
}

type user[T any] struct {
	key         string
	ID          *lib.BaseSort[T]
	CreatedAt   *lib.BaseSort[T]
	UpdatedAt   *lib.BaseSort[T]
	String      *lib.StringSort[T]
	StringPtr   *lib.StringSort[T]
	Int         *lib.BaseSort[T]
	IntPtr      *lib.BaseSort[T]
	Int32       *lib.BaseSort[T]
	Int64       *lib.BaseSort[T]
	Float32     *lib.BaseSort[T]
	Float64     *lib.BaseSort[T]
	Time        *lib.BaseSort[T]
	TimePtr     *lib.BaseSort[T]
	Duration    *lib.BaseSort[T]
	DurationPtr *lib.BaseSort[T]
}

func (n user[T]) MainGroup() group[T] {
	return newGroup[T](keyed(n.key, "main_group"))
}

func (n user[T]) MainGroupPtr() group[T] {
	return newGroup[T](keyed(n.key, "main_group_ptr"))
}
