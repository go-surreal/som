// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package som

import (
	"context"
	"errors"
	"fmt"
	conv "github.com/marcbinz/som/examples/testing/gen/som/conv"
	query "github.com/marcbinz/som/examples/testing/gen/som/query"
	relate "github.com/marcbinz/som/examples/testing/gen/som/relate"
	model "github.com/marcbinz/som/examples/testing/model"
	surrealdbgo "github.com/surrealdb/surrealdb.go"
)

type FieldsLikeDBResponseRepo interface {
	Query() query.FieldsLikeDBResponse
	Create(ctx context.Context, user *model.FieldsLikeDBResponse) error
	CreateWithID(ctx context.Context, id string, user *model.FieldsLikeDBResponse) error
	Read(ctx context.Context, id string) (*model.FieldsLikeDBResponse, bool, error)
	Update(ctx context.Context, user *model.FieldsLikeDBResponse) error
	Delete(ctx context.Context, user *model.FieldsLikeDBResponse) error
	Relate() *relate.FieldsLikeDBResponse
}

func (c *ClientImpl) FieldsLikeDBResponseRepo() FieldsLikeDBResponseRepo {
	return &fieldsLikeDBResponse{db: c.db}
}

type fieldsLikeDBResponse struct {
	db Database
}

func (n *fieldsLikeDBResponse) Query() query.FieldsLikeDBResponse {
	return query.NewFieldsLikeDBResponse(n.db)
}

func (n *fieldsLikeDBResponse) Create(ctx context.Context, fieldsLikeDBResponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDBResponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDBResponse.ID() != "" {
		return errors.New("given node already has an id")
	}
	key := "fields_like_db_response"
	data := conv.FromFieldsLikeDBResponse(*fieldsLikeDBResponse)

	raw, err := n.db.Create(key, data)
	if err != nil {
		return fmt.Errorf("could not create entity: %w", err)
	}
	var convNodes []conv.FieldsLikeDBResponse
	err = surrealdbgo.Unmarshal(raw, &convNodes)
	if err != nil {
		return fmt.Errorf("could not unmarshal response: %w", err)
	}
	if len(convNodes) < 1 {
		return errors.New("response is empty")
	}
	*fieldsLikeDBResponse = conv.ToFieldsLikeDBResponse(convNodes[0])
	return nil
}

func (n *fieldsLikeDBResponse) CreateWithID(ctx context.Context, id string, fieldsLikeDBResponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDBResponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDBResponse.ID() != "" {
		return errors.New("creating node with preset ID not allowed, use CreateWithID for that")
	}
	key := "fields_like_db_response:" + "⟨" + id + "⟩"
	data := conv.FromFieldsLikeDBResponse(*fieldsLikeDBResponse)

	convNode, err := surrealdbgo.SmartUnmarshal[conv.FieldsLikeDBResponse](n.db.Create(key, data))
	if err != nil {
		return fmt.Errorf("could not create entity: %w", err)
	}
	*fieldsLikeDBResponse = conv.ToFieldsLikeDBResponse(convNode)
	return nil
}

func (n *fieldsLikeDBResponse) Read(ctx context.Context, id string) (*model.FieldsLikeDBResponse, bool, error) {
	convNode, err := surrealdbgo.SmartUnmarshal[conv.FieldsLikeDBResponse](n.db.Select("fields_like_db_response:⟨" + id + "⟩"))
	if errors.Is(err, surrealdbgo.ErrNoRow) {
		return nil, false, nil
	}
	if err != nil {
		return nil, false, fmt.Errorf("could not read entity: %w", err)
	}
	node := conv.ToFieldsLikeDBResponse(convNode)
	return &node, true, nil
}

func (n *fieldsLikeDBResponse) Update(ctx context.Context, fieldsLikeDBResponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDBResponse == nil {
		return errors.New("the passed node must not be nil")
	}
	if fieldsLikeDBResponse.ID() == "" {
		return errors.New("cannot update FieldsLikeDBResponse without existing record ID")
	}
	data := conv.FromFieldsLikeDBResponse(*fieldsLikeDBResponse)

	convNode, err := surrealdbgo.SmartUnmarshal[conv.FieldsLikeDBResponse](n.db.Update("fields_like_db_response:⟨"+fieldsLikeDBResponse.ID()+"⟩", data))
	if err != nil {
		return fmt.Errorf("could not update entity: %w", err)
	}
	*fieldsLikeDBResponse = conv.ToFieldsLikeDBResponse(convNode)
	return nil
}

func (n *fieldsLikeDBResponse) Delete(ctx context.Context, fieldsLikeDBResponse *model.FieldsLikeDBResponse) error {
	if fieldsLikeDBResponse == nil {
		return errors.New("the passed node must not be nil")
	}
	_, err := n.db.Delete("fields_like_db_response:⟨" + fieldsLikeDBResponse.ID() + "⟩")
	if err != nil {
		return fmt.Errorf("could not delete entity: %w", err)
	}
	return nil
}

func (n *fieldsLikeDBResponse) Relate() *relate.FieldsLikeDBResponse {
	return relate.NewFieldsLikeDBResponse(n.db)
}
