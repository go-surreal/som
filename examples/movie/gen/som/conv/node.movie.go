// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package conv

import (
	"encoding/json"
	som "github.com/go-surreal/som"
	model "github.com/go-surreal/som/examples/movie/model"
	"strings"
)

type Movie struct {
	ID    string `json:"id,omitempty"`
	Title string `json:"title"`
}

func FromMovie(data model.Movie) Movie {
	return Movie{Title: data.Title}
}

func ToMovie(data Movie) model.Movie {
	return model.Movie{
		Node:  som.NewNode(parseDatabaseID("movie", data.ID)),
		Title: data.Title,
	}
}

type movieLink struct {
	Movie
	ID string
}

func (f *movieLink) MarshalJSON() ([]byte, error) {
	if f == nil {
		return nil, nil
	}
	return json.Marshal(f.ID)
}

func (f *movieLink) UnmarshalJSON(data []byte) error {
	raw := string(data)
	if strings.HasPrefix(raw, "\"") && strings.HasSuffix(raw, "\"") {
		raw = raw[1 : len(raw)-1]
		f.ID = parseDatabaseID("movie", raw)
		return nil
	}
	type alias movieLink
	var link alias
	err := json.Unmarshal(data, &link)
	if err == nil {
		*f = movieLink(link)
	}
	return err
}

func fromMovieLink(link *movieLink) model.Movie {
	if link == nil {
		return model.Movie{}
	}
	return ToMovie(Movie(link.Movie))
}

func fromMovieLinkPtr(link *movieLink) *model.Movie {
	if link == nil {
		return nil
	}
	node := ToMovie(Movie(link.Movie))
	return &node
}

func toMovieLink(node model.Movie) *movieLink {
	if node.ID() == "" {
		return nil
	}
	link := movieLink{Movie: FromMovie(node), ID: buildDatabaseID("movie", node.ID())}
	return &link
}

func toMovieLinkPtr(node *model.Movie) *movieLink {
	if node == nil || node.ID() == "" {
		return nil
	}
	link := movieLink{Movie: FromMovie(*node), ID: buildDatabaseID("movie", node.ID())}
	return &link
}
