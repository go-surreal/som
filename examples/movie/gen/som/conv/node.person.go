// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package conv

import (
	"encoding/json"
	som "github.com/marcbinz/som"
	model "github.com/marcbinz/som/examples/movie/model"
	"strings"
)

type Person struct {
	ID   string `json:"id,omitempty"`
	Name string `json:"name"`
}

func FromPerson(data model.Person) Person {
	return Person{Name: data.Name}
}

func ToPerson(data Person) model.Person {
	return model.Person{
		Name: data.Name,
		Node: som.NewNode(parseDatabaseID("person", data.ID)),
	}
}

type personLink struct {
	Person
	ID string
}

func (f *personLink) MarshalJSON() ([]byte, error) {
	if f == nil {
		return nil, nil
	}
	return json.Marshal(f.ID)
}

func (f *personLink) UnmarshalJSON(data []byte) error {
	raw := string(data)
	if strings.HasPrefix(raw, "\"") && strings.HasSuffix(raw, "\"") {
		raw = raw[1 : len(raw)-1]
		f.ID = parseDatabaseID("person", raw)
		return nil
	}
	type alias personLink
	var link alias
	err := json.Unmarshal(data, &link)
	if err == nil {
		*f = personLink(link)
	}
	return err
}

func fromPersonLink(link *personLink) model.Person {
	if link == nil {
		return model.Person{}
	}
	return ToPerson(Person(link.Person))
}

func fromPersonLinkPtr(link *personLink) *model.Person {
	if link == nil {
		return nil
	}
	node := ToPerson(Person(link.Person))
	return &node
}

func toPersonLink(node model.Person) *personLink {
	if node.ID() == "" {
		return nil
	}
	link := personLink{Person: FromPerson(node), ID: buildDatabaseID("person", node.ID())}
	return &link
}

func toPersonLinkPtr(node *model.Person) *personLink {
	if node == nil || node.ID() == "" {
		return nil
	}
	link := personLink{Person: FromPerson(*node), ID: buildDatabaseID("person", node.ID())}
	return &link
}
