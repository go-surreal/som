// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package som

import (
	"context"
	"errors"
	conv "github.com/marcbinz/som/examples/movie/gen/som/conv"
	query "github.com/marcbinz/som/examples/movie/gen/som/query"
	relate "github.com/marcbinz/som/examples/movie/gen/som/relate"
	model "github.com/marcbinz/som/examples/movie/model"
	surrealdbgo "github.com/surrealdb/surrealdb.go"
)

type PersonRepo interface {
	Query() query.Person
	Create(ctx context.Context, user *model.Person) error
	CreateWithID(ctx context.Context, id string, user *model.Person) error
	Read(ctx context.Context, id string) (*model.Person, bool, error)
	Update(ctx context.Context, user *model.Person) error
	Delete(ctx context.Context, user *model.Person) error
	Relate() *relate.Person
}

func (c *ClientImpl) PersonRepo() PersonRepo {
	return &person{db: c.db}
}

type person struct {
	db Database
}

func (n *person) Query() query.Person {
	return query.NewPerson(n.db)
}

func (n *person) Create(ctx context.Context, person *model.Person) error {
	if person == nil {
		return errors.New("the passed node must not be nil")
	}
	if person.ID() != "" {
		return errors.New("creating node with preset ID not allowed, use CreateWithID for that")
	}
	key := "person"
	data := conv.FromPerson(*person)

	raw, err := n.db.Create(key, data)
	if err != nil {
		return err
	}
	if _, ok := raw.([]any); !ok {
		raw = []any{raw} // temporary fix
	}
	var convNode conv.Person
	err = surrealdbgo.Unmarshal(raw, &convNode)
	if err != nil {
		return err
	}
	*person = conv.ToPerson(convNode)
	return nil
}

func (n *person) CreateWithID(ctx context.Context, id string, person *model.Person) error {
	if person == nil {
		return errors.New("the passed node must not be nil")
	}
	if person.ID() != "" {
		return errors.New("creating node with preset ID not allowed, use CreateWithID for that")
	}
	key := "person:" + "⟨" + id + "⟩"
	data := conv.FromPerson(*person)

	raw, err := n.db.Create(key, data)
	if err != nil {
		return err
	}
	if _, ok := raw.([]any); !ok {
		raw = []any{raw} // temporary fix
	}
	var convNode conv.Person
	err = surrealdbgo.Unmarshal(raw, &convNode)
	if err != nil {
		return err
	}
	*person = conv.ToPerson(convNode)
	return nil
}

func (n *person) Read(ctx context.Context, id string) (*model.Person, bool, error) {
	raw, err := n.db.Select("person:⟨" + id + "⟩")
	if err != nil {
		if errors.As(err, &surrealdbgo.PermissionError{}) {
			return nil, false, nil
		}
		return nil, false, err
	}
	if _, ok := raw.([]any); !ok {
		raw = []any{raw} // temporary fix
	}
	var convNode conv.Person
	err = surrealdbgo.Unmarshal(raw, &convNode)
	if err != nil {
		return nil, false, err
	}
	node := conv.ToPerson(convNode)
	return &node, true, nil
}

func (n *person) Update(ctx context.Context, person *model.Person) error {
	if person == nil {
		return errors.New("the passed node must not be nil")
	}
	if person.ID() == "" {
		return errors.New("cannot update Person without existing record ID")
	}
	data := conv.FromPerson(*person)

	raw, err := n.db.Update("person:⟨"+person.ID()+"⟩", data)
	if err != nil {
		return err
	}
	var convNode conv.Person
	err = surrealdbgo.Unmarshal([]any{raw}, &convNode)
	if err != nil {
		return err
	}
	*person = conv.ToPerson(convNode)
	return nil
}

func (n *person) Delete(ctx context.Context, person *model.Person) error {
	if person == nil {
		return errors.New("the passed node must not be nil")
	}
	_, err := n.db.Delete("person:⟨" + person.ID() + "⟩")
	if err != nil {
		return err
	}
	return nil
}

func (n *person) Relate() *relate.Person {
	return relate.NewPerson(n.db)
}
