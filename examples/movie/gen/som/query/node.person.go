// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package query

import (
	"errors"
	"fmt"
	conv "github.com/marcbinz/som/examples/movie/gen/som/conv"
	with "github.com/marcbinz/som/examples/movie/gen/som/with"
	model "github.com/marcbinz/som/examples/movie/model"
	lib "github.com/marcbinz/som/lib"
	surrealdbgo "github.com/surrealdb/surrealdb.go"
	"strings"
	"time"
)

type Person struct {
	db    Database
	query lib.Query[model.Person]
}

func NewPerson(db Database) *Person {
	return &Person{
		db:    db,
		query: lib.NewQuery[model.Person]("person"),
	}
}

func (q Person) Filter(filters ...lib.Filter[model.Person]) Person {
	q.query.Where = append(q.query.Where, filters...)
	return q
}

func (q Person) Order(by ...*lib.Sort[model.Person]) Person {
	for _, s := range by {
		q.query.Sort = append(q.query.Sort, (*lib.SortBuilder)(s))
	}
	return q
}

func (q Person) OrderRandom() Person {
	q.query.SortRandom = true
	return q
}

func (q Person) Offset(offset int) Person {
	q.query.Offset = offset
	return q
}

func (q Person) Limit(limit int) Person {
	q.query.Limit = limit
	return q
}

func (q Person) Fetch(fetch ...with.Fetch_[model.Person]) Person {
	for _, f := range fetch {
		if field := fmt.Sprintf("%v", f); field != "" {
			q.query.Fetch = append(q.query.Fetch, field)
		}
	}
	return q
}

func (q Person) Timeout(timeout time.Duration) Person {
	q.query.Timeout = timeout
	return q
}

func (q Person) Parallel(parallel bool) Person {
	q.query.Parallel = parallel
	return q
}

func (q Person) Count() (int, error) {
	res := q.query.BuildAsCount()
	raw, err := q.db.Query(res.Statement, res.Variables)
	if err != nil {
		return 0, err
	}
	var rawCount countResult
	ok, err := surrealdbgo.UnmarshalRaw(raw, &rawCount)
	if err != nil {
		return 0, err
	}
	if !ok {
		return 0, nil
	}
	return rawCount.Count, nil
}

func (q Person) Exists() (bool, error) {
	count, err := q.Count()
	if err != nil {
		return false, err
	}
	return count > 0, nil
}

func (q Person) All() ([]*model.Person, error) {
	res := q.query.BuildAsAll()
	raw, err := q.db.Query(res.Statement, res.Variables)
	if err != nil {
		return nil, err
	}
	var rawNodes []conv.Person
	ok, err := surrealdbgo.UnmarshalRaw(raw, &rawNodes)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, nil
	}
	var nodes []*model.Person
	for _, rawNode := range rawNodes {
		node := conv.ToPerson(rawNode)
		nodes = append(nodes, &node)
	}
	return nodes, nil
}

func (q Person) AllIDs() ([]string, error) {
	res := q.query.BuildAsAllIDs()
	raw, err := q.db.Query(res.Statement, res.Variables)
	if err != nil {
		return nil, err
	}
	var rawNodes []*idNode
	ok, err := surrealdbgo.UnmarshalRaw(raw, &rawNodes)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, nil
	}
	var ids []string
	for _, rawNode := range rawNodes {
		ids = append(ids, rawNode.ID)
	}
	return ids, nil
}

func (q Person) First() (*model.Person, error) {
	q.query.Limit = 1
	res, err := q.All()
	if err != nil {
		return nil, err
	}
	if len(res) < 1 {
		return nil, errors.New("empty result")
	}
	return res[0], nil
}

func (q Person) FirstID() (string, error) {
	q.query.Limit = 1
	res, err := q.AllIDs()
	if err != nil {
		return "", err
	}
	if len(res) < 1 {
		return "", errors.New("empty result")
	}
	return res[0], nil
}

func (q Person) Describe() string {
	res := q.query.BuildAsAll()
	return strings.TrimSpace(res.Statement)
}
