// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package where

import (
	model "github.com/marcbinz/som/examples/movie/model"
	lib "github.com/marcbinz/som/lib"
)

var ActedIn = newActedIn[model.ActedIn](lib.NewKey[model.ActedIn]())

func newActedIn[T any](key lib.Key[T]) actedIn[T] {
	return actedIn[T]{
		ID:  lib.NewID[T](lib.Field(key, "id"), "acted_in"),
		key: key,
	}
}

type actedIn[T any] struct {
	key lib.Key[T]
	ID  *lib.ID[T]
}

type actedInIn[T any] struct {
	lib.Filter[T]
	key lib.Key[T]
}

func newActedInIn[T any](key lib.Key[T]) actedInIn[T] {
	return actedInIn[T]{lib.KeyFilter(key), key}
}

func (i actedInIn[T]) Movie(filters ...lib.Filter[model.Movie]) movieEdges[T] {
	key := lib.EdgeIn(i.key, "movie", filters)
	return movieEdges[T]{lib.KeyFilter(key), key}
}

type actedInOut[T any] struct {
	lib.Filter[T]
	key lib.Key[T]
}

func newActedInOut[T any](key lib.Key[T]) actedInOut[T] {
	return actedInOut[T]{lib.KeyFilter(key), key}
}

func (o actedInOut[T]) Person(filters ...lib.Filter[model.Person]) personEdges[T] {
	key := lib.EdgeOut(o.key, "person", filters)
	return personEdges[T]{lib.KeyFilter(key), key}
}
