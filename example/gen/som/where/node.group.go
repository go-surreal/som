// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package where

import (
	model "github.com/marcbinz/som/example/model"
	lib "github.com/marcbinz/som/lib"
)

var Group = newGroup[model.Group](lib.NewKey())

func newGroup[T any](key lib.Key) group[T] {
	return group[T]{
		CreatedAt: lib.NewTime[T](key.Field("created_at")),
		ID:        lib.NewID[T](key.Field("id"), "group"),
		Name:      lib.NewString[T](key.Field("name")),
		UpdatedAt: lib.NewTime[T](key.Field("updated_at")),
		key:       key,
	}
}

type group[T any] struct {
	key       lib.Key
	ID        *lib.ID[T]
	CreatedAt *lib.Time[T]
	UpdatedAt *lib.Time[T]
	Name      *lib.String[T]
}
type groupSlice[T any] struct {
	group[T]
	*lib.Slice[T, model.Group]
}

func (n group[T]) Members(filters ...lib.Filter[model.MemberOf]) memberOfOut[T] {
	return newMemberOfOut[T](n.key.EdgeOut("member_of", lib.Filters(filters)))
}
