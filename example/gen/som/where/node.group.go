// Code generated by github.com/marcbinz/som, DO NOT EDIT.
package where

import (
	model "github.com/marcbinz/som/example/model"
	filter "github.com/marcbinz/som/lib/filter"
)

var Group = newGroup[model.Group](filter.NewKey())

func newGroup[T any](key filter.Key) group[T] {
	return group[T]{
		CreatedAt: filter.NewTime[T](key.Dot("created_at")),
		ID:        filter.NewID[T](key.Dot("id"), "group"),
		Name:      filter.NewString[T](key.Dot("name")),
		UpdatedAt: filter.NewTime[T](key.Dot("updated_at")),
		key:       key,
	}
}

type group[T any] struct {
	key       filter.Key
	ID        *filter.ID[T]
	CreatedAt *filter.Time[T]
	UpdatedAt *filter.Time[T]
	Name      *filter.String[T]
}
type groupSlice[T any] struct {
	group[T]
	*filter.Slice[T, model.Group]
}

func (n group[T]) Members(filters ...filter.Of[model.MemberOf]) memberOfOut[T] {
	return newMemberOfOut[T](n.key.Out(""), filters)
}
