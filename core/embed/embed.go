package embed

import (
	"bytes"
	"embed"
	"io/fs"
	"path/filepath"
	"strings"
	"text/template"
)

const (
	baseDir = "som"
)

var (
	CodegenComment = []byte("// Code generated by github.com/go-surreal/som, DO NOT EDIT.")
	embedComment   = []byte("//go:build embed")
)

//go:embed som
var content embed.FS

type Template struct {
	GenerateOutPath string
}

type File struct {
	Path    string
	Content []byte
}

func Read(tmpl *Template) ([]*File, error) {
	var files []*File

	buf := bytes.NewBuffer(nil)

	err := fs.WalkDir(content, baseDir, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		if d.IsDir() {
			return nil
		}

		file, err := fs.ReadFile(content, path)
		if err != nil {
			return err
		}

		fileTmpl, err := template.New(path).Parse(string(file))
		if err != nil {
			return err
		}

		if err := fileTmpl.Execute(buf, tmpl); err != nil {
			return err
		}

		defer buf.Reset()

		path = strings.TrimPrefix(path, baseDir+string(filepath.Separator))

		// Check if the file ends with ".tmpl" and replace it with ".go"
		if strings.HasSuffix(path, ".tmpl") {
			path = strings.TrimSuffix(path, ".tmpl") + ".go"
		}

		files = append(files, &File{
			Path:    path,
			Content: bytes.Replace(buf.Bytes(), embedComment, CodegenComment, 1),
		})

		return nil
	})
	if err != nil {
		return nil, err
	}

	return files, nil
}
